import alimentos.*
import ambiente.*
import config.*
import enemigos.*
import pokemons.*
import posicionamiento.*
import transiciones.*
import wollok.game.*

describe "DETECTIVE" {
	
	// FRUTAS
	const banana  = new Banana(position = game.at(3,3))
	const manzana = new Manzana(position = game.at(3,4))
	const uva     = new Uva(position = game.at(4,3))
	// ENEMIGOS EJEMPLIFICADORES
	const james  = new James(position = game.at(10,1), direccion = derecha)
	const pinche = new Pinche(position = game.at(9,1))
	// AMBIENTE
	const cofre = new Cofre(position = game.at(7,7))
	const pared = new Pared(position = game.at(2,6))
	// POKEBOLA
	const pokebola = new Pokebola(position = game.at(2,2))
	// TOTALIDAD DE LOS OBJETOS INCLUYENDO UN PRISIONERO EJEMPLIFICADOR Y EL DETECTIVE
	const objetos = #{banana, manzana, uva, james, pinche, cofre, pared, pokebola, prisioneroEvee, pikachu}
	
	method initialize() {
		game.clear()
		config.ambienteBasico()
		objetos.forEach({obj => game.addVisual(obj)})
		sonidosManager.cambiarEstado()
	}
	
	test "ENERGIA AL COMER FRUTAS...
		Pikachu, inicia con 100 de energía.
		Come una manzana y adquiere su energía y queda en 180.
		Come una uva y adquiere su energía negativa y queda en 130.
		Come una banana y adquiere su energía y queda en 180." {
		// Estado inicial pedido:
		pikachu.energia(100)
		// Caso prueba:
		assert.equals(100, pikachu.energia())
		pikachu.comerFruta(manzana)
		assert.equals(180, pikachu.energia())
		pikachu.comerFruta(uva)
		assert.equals(130, pikachu.energia())
		pikachu.comerFruta(banana)
		assert.equals(180, pikachu.energia())
	}
	
	test "ENERGIA AL COMER FRUTAS DEBE SER COMO MAXIMO 600...
		Pikachu teniendo 550 o 560 de energía, al comer una banana
		no deberia superar los 600." {
		// Estado inicial pedido:
		pikachu.energia(550)
		// Caso prueba:
		pikachu.comerFruta(banana)
		assert.equals(600, pikachu.energia())
		// Estado inicial pedido:
		pikachu.energia(560)
		// Caso prueba:
		pikachu.comerFruta(banana)
		assert.equals(600, pikachu.energia())
		assert.equals("vivo", iconPikachu.vitalidad(pikachu.energia()))
		assert.equals(lleno, iconCorazonPikachu.estadoActualDelCorazon())
		
	}
	
	test "ENERGIA AL COMER FRUTAS PARA MORIR...
		Pikachu, inicia con 0 de energía.
		Caminando come una uva y queda en -50. Por esa razón, muere." {
		// Estado inicial pedido:
		pikachu.energia(0)
		// Caso prueba:
		pikachu.comerFruta(uva)
		assert.equals(-50, pikachu.energia())
		assert.equals(muerto, pikachu.estado())
		assert.equals("muerto", iconPikachu.vitalidad(pikachu.energia()))
		assert.equals(vacio, iconCorazonPikachu.estadoActualDelCorazon()) 
	}
	
	test "ENERGIA AL RECIBIR DAÑO...
		Pikachu, inicia con 200 de energía.
		Caminando choca con James del Equipo Rocket y queda en 100.
		Luego, se descuida cruza por una trampa pinche y queda en 50." {
		// Estado inicial pedido:
		pikachu.energia(200)
		pinche.cambiarEstado()
		// Caso prueba:
		james.colision(pikachu)
		assert.equals(100, pikachu.energia())
		pinche.colision(pikachu)
		assert.equals(50, pikachu.energia())
	}
	
	test "MOVIMIENTOS POSIBLES...
		Pikachu, se mueve hacia los 4 lados desde la celda (5,5).
		Caminando cambia su ASPECTO en cada movimiento." {
		// Estado inicial pedido:
		pikachu.position(game.at(1,5))
		// Caso prueba:
		assert.equals(caminando, pikachu.estado())
		pikachu.mover(derecha)
		assert.equals("caminando-derecha.png", pikachu.image())
		assert.equals(game.at(2,5), pikachu.position())
		pikachu.mover(izquierda)
		assert.equals("caminando-izquierda.png", pikachu.image())
		assert.equals(game.at(1,5), pikachu.position())
		pikachu.mover(arriba)
		assert.equals("caminando-arriba.png", pikachu.image())
		assert.equals(game.at(1,6), pikachu.position())
		pikachu.mover(abajo)
		assert.equals("caminando-abajo.png", pikachu.image())
		assert.equals(game.at(1,5), pikachu.position())
	}
	
	test "MOVIMIENTOS IMPOSIBLES...
		Pikachu, se quiere mover hacia la pared y no puede, se queda en su posicion actual
		porque la pared no es atravesable." {
		// Estado inicial pedido:
		pikachu.position(game.at(1,6))
		// Caso prueba:
		assert.equals(game.at(2,6), pared.position())
		pikachu.mover(derecha)
		assert.equals(game.at(1,6), pikachu.position())
	}
	
	test "LLAVE EN EL COFRE ENCONTRADA, RESCATA AL PRISIONERO Y ENTRA A LA POKEBOLA." {
		// Estado inicial pedido:
		cofre.contenido(llave)
		// Caso prueba:
		assert.notThat(pikachu.tieneLlave())
		assert.notThat(pikachu.heRescatadoAlPrisionero())
		cofre.action()
		llave.action()
		assert.that(pikachu.tieneLlave())
		assert.that(prisioneroEvee.esAtravesable())
		prisioneroEvee.colision(pikachu)
		assert.that(pikachu.heRescatadoAlPrisionero())
		assert.that(pokebola.esAtravesable())
	}
	
	test "LLAVE EN EL COFRE ENCONTRADA, NO RESCATA AL PRISIONERO Y NO PUEDE ENTRAR A LA POKEBOLA." {
		// Estado inicial pedido:
		cofre.contenido(llave)
		// Caso prueba:
		cofre.action()
		llave.action()
		assert.that(pikachu.tieneLlave())
		assert.notThat(pikachu.heRescatadoAlPrisionero())
		assert.notThat(pokebola.esAtravesable())
	}
	
	test "LLAVE EN EL COFRE NO ENCONTRADA, NO PUEDE RESCATAR AL PRISIONERO." {
		// Estado inicial pedido:
		cofre.contenido(null)
		// Caso prueba:
		cofre.action()
		assert.notThat(pikachu.tieneLlave())
		assert.notThat(prisioneroEvee.esAtravesable())
	}
	
	test "RESETEAR...
		Una vez que pikachu es reseteado: 
		no tiene la llave ni rescató al prisionero, obtiene la energia que le pasen 
		(ya sea la inicial o la del nivel previo) y su estado es caminando." {
		// Estado inicial pedido, versión ejemplificadora: GANADOR
		pikachu.estado(ganador)
		pikachu.energia(400)
		pikachu.obtenerLlave()
		pikachu.heRescatadoAlPrisionero(true)
		// Caso prueba versión ejemplificadora: GANADOR
		pikachu.resetear(400)
		assert.notThat(pikachu.tieneLlave())
		assert.notThat(pikachu.heRescatadoAlPrisionero())
		assert.equals(caminando, pikachu.estado())
		assert.equals(400, pikachu.energia())
	}
	
}

