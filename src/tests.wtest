import ambiente.*
import alimentosFrutales.*
import config.*
import posicionamiento.*
import objects.*
import wollok.game.*

describe "Acciones de Pikachu" {
	
	// FRUTAS
	const manzana = new Manzana()
	const banana  = new Banana()
	const baya    = new Baya()
	// ENEMIGO EJEMPLIFICADOR
	const enemigo = new James(position = game.at(10,1), direccion = arriba)
	// AMBIENTE
	const cofre = new Cofre(position = game.at(7,7))
	const pared = new Pared(position = game.at(9,8))
	const trampaPinche = new Pinche(position = game.at(9,1))
	
	method initialize() {
		game.clear()
		config.dimensiones()
		game.addVisual(cofre)
		game.addVisual(enemigo)
		game.addVisual(pokebola)
		game.addVisual(prisioneroEvee)
		game.addVisual(pared)
		game.addVisual(trampaPinche)
		game.addVisual(pikachu)
	}
	
	test "ENERGIA AL COMER FRUTAS...
		Pikachu, inicia con 100 de energía.
		Come un anana y adquiere su energía y queda en 180.
		Come una baya y adquiere su energía negativa y queda en 130.
		Come un platano y adquiere su energía y queda en 180." {
		// Estado inicial pedido:
		pikachu.energia(100)
		// Caso prueba:
		assert.equals(100, pikachu.energia())
		pikachu.comerFruta(manzana)
		assert.equals(180, pikachu.energia())
		pikachu.comerFruta(baya)
		assert.equals(130, pikachu.energia())
		pikachu.comerFruta(banana)
		assert.equals(180, pikachu.energia())
	}
	
	test "ENERGIA AL COMER FRUTAS DEBE SER COMO MAXIMO 600...
		Pikachu teniendo 550 o 560 de energía, al comer una banana
		no deberia superar los 600." {
		// Estado inicial pedido:
		pikachu.energia(550)
		// Caso prueba:
		pikachu.comerFruta(banana)
		assert.equals(600, pikachu.energia())
		// Estado inicial pedido:
		pikachu.energia(560)
		// Caso prueba:
		pikachu.comerFruta(banana)
		assert.equals(600, pikachu.energia())
	}
	
	test "ENERGIA AL COMER FRUTAS PARA MORIR...
		Pikachu, inicia con 0 de energía.
		Caminando come una baya y queda en -50. Por esa razón, muere." {
		// Estado inicial pedido:
		pikachu.energia(0)
		// Caso prueba:
		pikachu.comerFruta(baya)
		assert.equals(-50, pikachu.energia())
		assert.equals(muerto, pikachu.estado())
	}
	
	test "ENERGIA AL RECIBIR DAÑO...
		Pikachu, inicia con 200 de energía.
		Caminando choca con un integrante del Equipo Rocket y queda en 50.
		Luego, se descuida cruza por una trampa pinche y queda en 0." {
		// Estado inicial pedido:
		pikachu.energia(200)
		// Caso prueba:
		enemigo.colision(pikachu)
		assert.equals(50, pikachu.energia())
		trampaPinche.colision(pikachu)
		assert.equals(0, pikachu.energia())
	}
	
	test "MOVIMIENTOS POSIBLES...
		Pikachu, se mueve hacia los 4 lados desde la celda (5,5).
		Caminando cambia su ASPECTO en cada movimiento." {
		// Estado inicial pedido:
		pikachu.position(game.at(5,5))
		// Caso prueba:
		assert.equals(caminando, pikachu.estado())
		pikachu.mover(derecha)
		assert.equals("caminando-derecha.png", pikachu.image())
		assert.equals(game.at(6,5), pikachu.position())
		pikachu.mover(izquierda)
		assert.equals("caminando-izquierda.png", pikachu.image())
		assert.equals(game.at(5,5), pikachu.position())
		pikachu.mover(arriba)
		assert.equals("caminando-arriba.png", pikachu.image())
		assert.equals(game.at(5,6), pikachu.position())
		pikachu.mover(abajo)
		assert.equals("caminando-abajo.png", pikachu.image())
		assert.equals(game.at(5,5), pikachu.position())
	}
	
	test "MOVIMIENTOS IMPOSIBLES...
		Pikachu, se quiere mover hacia la pared y no puede,
		porque la pared no es atravesable." {
		// Estado inicial pedido:
		pikachu.position(game.at(8,8))
		// Caso prueba:
		assert.equals(game.at(9,8), pared.position())
		assert.throwsException({ pikachu.mover(derecha) })
	}
	
	test "LLAVE EN EL COFRE ENCONTRADA, RESCATA AL PRISIONERO Y ENTRA A LA POKEBOLA." {
		// Estado inicial pedido:
		cofre.contenido(llave)
		// Caso prueba:
		assert.notThat(pikachu.tieneLlave())
		assert.notThat(pikachu.heRescatadoAlPrisionero())
		cofre.action()
		llave.action()
		assert.that(pikachu.tieneLlave())
		assert.that(prisioneroEvee.esAtravesable())
		prisioneroEvee.colision(pikachu)
		assert.that(pikachu.heRescatadoAlPrisionero())
		assert.that(pokebola.esAtravesable())
	}
	
	test "LLAVE EN EL COFRE ENCONTRADA, NO RESCATA AL PRISIONERO Y NO PUEDE ENTRAR A LA POKEBOLA." {
		// Estado inicial pedido:
		cofre.contenido(llave)
		// Caso prueba:
		cofre.action()
		llave.action()
		assert.that(pikachu.tieneLlave())
		assert.notThat(pikachu.heRescatadoAlPrisionero())
		assert.notThat(pokebola.esAtravesable())
	}
	
	test "LLAVE EN EL COFRE NO ENCONTRADA, NO PUEDE RESCATAR AL PRISIONERO." {
		// Estado inicial pedido:
		cofre.contenido(null)
		// Caso prueba:
		cofre.action()
		assert.notThat(pikachu.tieneLlave())
		assert.notThat(prisioneroEvee.esAtravesable())
	}
	
}

